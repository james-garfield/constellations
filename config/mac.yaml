
# This handles building the project

compiler: clang++ # Change to whatever will compile your c/c++ code. You can even use emscripten!
name: Constellations # The name of the project, used for debugging.
output: bin/constellations # The output file.

# These are the flags that will be passed to the compiler, such as -std=c++17
flags: 
    - std=c++17
    - framework CoreVideo
    - framework IOKit
    - framework Cocoa
    - framework GLUT
    - framework OpenGL

# The c/c++ files that will be compiled in order. 
files: 
    - src/libraylib.a
    - src/components/object.cpp
    - src/components/collider.cpp
    - src/components/drag.cpp
    - src/components/drag_icon.cpp
    - src/observers/ontop/obs.cpp
    # - src/observers/ontop/sub.cpp
    - src/main.cpp

# Where are the header files located?
includes:
   - raylib/src
   - src/components
   - src/observers
   - src/observers/ontop

# Not to be confused with libraries, these are the paths to the libraries.
# libs:
#     - 

# These are the libraries that will be linked to the project. Path must be specified in libs.
# libraries: 
#    - raylib

# Shell commands to run before or after building.
# This is more (CMake) style, where you can run shell commands before building. 
# Also, you can run shell commands after building.
shell:
    # before:
    #     - echo "Hello, world!"
    after:
        - ./bin/constellations # Usually you want to run the program after building it.

